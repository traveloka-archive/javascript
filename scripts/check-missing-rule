#!/usr/bin/env node
/* eslint no-console: 0 */
const DEPRECATED_RULES = [
  // react
  'react/no-comment-textnodes',
  'react/require-extension',
  'react/wrap-multilines',
  // babel
  'babel/generator-star-spacing',
  'babel/object-shorthand',
  'babel/arrow-parens',
  'babel/func-params-comma-dangle',
  'babel/array-bracket-spacing',
  'babel/flow-object-type',
];

// Rules with false positives, missing docs or no clear use case. Revisit later
const EXPERIMENTAL_RULES = [
  'babel/semi',
  'jsx-a11y/accessible-emoji',
  'jsx-a11y/aria-activedescendant-has-tabindex',
  'jsx-a11y/media-has-caption',
  'jsx-a11y/no-autofocus',
  'jsx-a11y/no-distracting-elements',
  'jsx-a11y/no-interactive-element-to-noninteractive-role',
  'jsx-a11y/no-noninteractive-element-interactions',
  'jsx-a11y/no-noninteractive-element-to-interactive-role',
  'jsx-a11y/no-noninteractive-tabindex',
  'jsx-a11y/no-redundant-roles',
  'react/no-unused-state',
  // new rules, TODO check
  'jsx-a11y/control-has-associated-label',
  'jsx-a11y/label-has-associated-control',
  'react/button-has-type',
  'react/destructuring-assignment',
  'react/forbid-dom-props',
  'react/jsx-curly-brace-presence',
  'react/jsx-curly-newline',
  'react/jsx-fragments',
  'react/jsx-max-depth',
  'react/jsx-props-no-spreading',
  'react/jsx-sort-default-props',
  'react/no-access-state-in-setstate',
  'react/no-this-in-sfc',
  'react/prefer-read-only-props',
  'react/state-in-constructor',
  'react/static-property-placement',
];

// Prints rules recognized by ESLint that don't appear in the given config
// preset. It helps with upgrading the preset when new ESLint gets released.
const getRuleFinder = require('eslint-find-rules');
const specifiedFile = process.argv[2];
const ruleFinder = getRuleFinder(specifiedFile);

const missingRules = ruleFinder.getUnusedRules()
.filter(rule => DEPRECATED_RULES.indexOf(rule) === -1)
.filter(rule => EXPERIMENTAL_RULES.indexOf(rule) === -1)
.filter(rule => !rule.startsWith('flowtype/'))
.filter(rule => !rule.startsWith('lodash/'))
.filter(rule => !rule.startsWith('react-native/'));

if (missingRules.length) {
  console.log(`New rules to add to the config: ${missingRules.join(', ')}.`);
  process.exit(1);
}
